class VisitReportsController < ApplicationController
  before_action :set_visit_report, only: [:show, :edit, :update, :destroy]

  # GET /visit_reports
  # GET /visit_reports.json
  def index
    @visit_reports = VisitReport.all
  end

  # GET /visit_reports/1
  # GET /visit_reports/1.json
  def show
  end

  # GET /visit_reports/new
  def new
    @visit_report = VisitReport.new
  end

  # GET /visit_reports/new_visit_event 
  def new_upcoming
    @visit_event = VisitReport.new
  end

  # GET /visit_reports/1/edit
  def edit
  end

  # POST /visit_reports
  # POST /visit_reports.json
  def create
    @visit_report = VisitReport.new(visit_report_params)

    respond_to do |format|
      if @visit_report.save
        format.html { redirect_to @visit_report, notice: 'Visit report was successfully created.' }
        format.json { render :show, status: :created, location: @visit_report }
      else
        format.html { render :new_upcoming }
        format.json { render json: @visit_report.errors, status: :unprocessable_entity }
      end
    end
  end

  # POST /visit_reports
  # POST /visit_reports.json 
  def create_upcoming
    @visit_event = VisitReport.new(visit_report_params)
    if @visit_event.save(validate: false)
      respond_to do |format|
        format.html { redirect_to page_path('events_calendar'), notice: 'Visit event was successfully created.' }
        format.json { render :show, status: :created, location: @visit_event }
      end
    else
      respond_to do |format|
        format.html { render :new }
        format.json { render json: @visit_event.errors, status: :unprocessable_entity }
      end
    end
  end  

  def events
    @visit_events = VisitReports.all
  end

  # PATCH/PUT /visit_reports/1
  # PATCH/PUT /visit_reports/1.json
  def update
    respond_to do |format|
      if @visit_report.update(visit_report_params)
        format.html { redirect_to @visit_report, notice: 'Visit report was successfully updated.' }
        format.json { render :show, status: :ok, location: @visit_report }
      else
        format.html { render :edit }
        format.json { render json: @visit_report.errors, status: :unprocessable_entity }
      end
    end
  end

  # GET /visit_reports/edit_livestock_heads
  def edit_livestock_heads
    @livestock_heads = LivestockHead.where("farmer_id = ?", params[:farmer_id])
    respond_to do |format|
      format.js
    end
  end

  # DELETE /visit_reports/1
  # DELETE /visit_reports/1.json
  def destroy
    @visit_report.destroy
    respond_to do |format|
      format.html { redirect_to visit_reports_url, notice: 'Visit report was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  # To import data from a CSV file
  # GET /visit_reports/import
  def import
    begin
      errors = VisitReport.import(params[:file])
      if errors
        redirect_to visit_reports_path, alert: "#{errors.to_sentence}"
      else
        redirect_to visit_reports_path, notice: 'Visit reports imported.'
      end
    rescue Exception => e
      redirect_to visit_reports_path, alert: "#{e.message}"
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_visit_report
      @visit_report = VisitReport.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def visit_report_params
      params.require(:visit_report).permit(:visit_date,
                                           :user_id,
                                           :farmer_id,
                                           :farm_id,
                                           :other_comments,
                                           :livestock_head_id,
                                           :weight, :bacteria,
                                           :daily_milk,
                                           :daily_milk_consumed_inhouse,
                                           :daily_milk_consumed_feeding,
                                           :daily_milk_sold,
                                           :selling_unit,
                                           :unit_price,
                                           :breeding,
                                           :pregnancy_duration_months,
                                           :breeding_date,
                                           :last_delivery_date,
                                           :changes_text,
                                           :recommendation,
                                           :daily_food,
                                           :feeding_status,
                                           :food_delivery_date,
                                           :supplementary_food,
                                           :green_food_type,
                                           :yellow_food_weight,
                                           :air_conditioning,
                                           :solid_floor, 
                                           :unsolid_floor,
                                           :water_supply,
                                           :water_availability,
                                           :other_animals_in_farm,
                                           :remain_food_estimated,
                                           :food_support_status,
                                           :outlook)
    end
end
